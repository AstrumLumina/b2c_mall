debug: true

server:
  port: 8086

spring:
  application:
    name: b2cmall-gateway

  config:
    import: optional:nacos:b2cmall-gateway

  cloud:
    nacos:
      discovery:
        server-addr: 10.0.0.208:8848
        username: nacos
        password: nacos
        fail-fast: false  #关闭快速失败功能,这样可以先启动服务在启动nacos而不会报错

      config:
        server-addr: 10.0.0.208:8848
        password: nacos
        username: nacos


    gateway:
      routes:
        - id: b2cmallProduct  # 规范： 请尽量定义为 服务访问地址的上下文路径
          uri: lb://b2cmall-product   # 这样写报错404 原因未知 lb://b2cmall-product
          predicates:
            - Path=/b2cmall/product/**
          filters:
            #- RewritePath=/b2cmall/product(?<segment>/?.*), /b2cmallProduct$\{segment}

        - id: b2cmallAdmin # 负载均衡转发请求
          uri: lb://b2cmall-admin  # 这样写报错404 原因未知 lb://b2cmall-admin/b2cmallAdmin 把后面这部分添加到路径重写过滤器中去
          predicates:
            - Path=/b2cmall/**
          filters:
            - RewritePath=/b2cmall(?<segment>/?.*), /b2cmall/admin$\{segment}


costum:
  swagger:
    resource:
      getSwaggerResourceFromServiceDiscover: false #当此微服务的的swagger路径未自定义,且为添加应用请求上下文时可以使用
      getSwaggerResourceFromGateWayRoute: true #此微服务的的swagger路径为自定未自定义时有效,如果在路径重写时会加保留应用下文路径则可以有上下文路径,
  selfServicePath: http://127.0.0.1:8086/


#  那么就很好解释官网的这个例子了，
#  对于配置文件中的： - RewritePath=/red(?<segment>/?.*), $\{segment}详解：
#
#  (?<segment>/?.*)：
#  ?<segment>
#  名称为 segment 的组
#  /?
#  字符/出现0次或1次
#  .*
#  任意字符出现0次或多次
#  合起来就是：将 /?.*匹配到的结果捕获到名称为segment的组中
#
#  $\{segment}：
#  将名称为 segment 的分组捕获到的文本置换到此处。
#  注意，\的出现是由于避免 yaml 语法认为这是一个变量（因为在 yaml 中变量的表示法为 ${variable}，而这里我们想表达的是字面含义），在 gateway 进行解析时，会被替换为 ${segment}
springfox:
  documentation:
    swagger
